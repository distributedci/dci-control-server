#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
import os

import sqlalchemy
from sqlalchemy.orm import Session
from sqlalchemy_utils import functions

from dci import auth
from dci.db.orm import *
from dci import dci_config
from dci.alembic import utils as dci_alembic

DCI_LOGIN = os.environ.get('DCI_LOGIN', 'admin')
DCI_PASSWORD = os.environ.get('DCI_PASSWORD', 'admin')
DCI_PASSWORD_HASH = auth.hash_password(DCI_PASSWORD)


def main():
    conf = dci_config.generate_conf()
    db_uri = conf['SQLALCHEMY_DATABASE_URI']
    if functions.database_exists(db_uri):
        functions.drop_database(db_uri)
        functions.create_database(db_uri)

    dci_alembic.sync()
    engine = sqlalchemy.create_engine(db_uri)

    session = Session(engine)

    # roles
    super_admin_role = Role(name='Super Admin', label='SUPER_ADMIN', description='Admin of the platform')
    product_owner_role = Role(name='Product Owner', label='PRODUCT_OWNER', description='Product Owner')
    admin_role = Role(name='Admin', label='ADMIN', description='Admin of a team')
    user_role = Role(name='User', label='USER', description='Regular User')
    remoteci_role = Role(name='RemoteCI', label='REMOTECI', description='A RemoteCI')
    feeder_role = Role(name='Feeder', label='FEEDER', description='A Feeder')
    session.add_all([super_admin_role, product_owner_role, admin_role, user_role, remoteci_role, feeder_role])
    session.flush()

    # teams
    admin_team = Team(name="admin")
    session.add(admin_team)
    session.flush()

    # users
    super_admin = User(name=DCI_LOGIN, password=DCI_PASSWORD_HASH, role_id=super_admin_role.id, team_id=admin_team.id,
                       fullname='Admin', email='admin@example.org')
    session.add(super_admin)

    # commit
    session.commit()


if __name__ == '__main__':
    main()
