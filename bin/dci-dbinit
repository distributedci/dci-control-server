#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
import os

import sqlalchemy
from sqlalchemy.orm import Session
from sqlalchemy_utils import functions

from dci import auth
from dci.db.orm import *
from dci import dci_config
from dci.alembic import utils as dci_alembic

DCI_LOGIN = os.environ.get('DCI_LOGIN', 'admin')
DCI_PASSWORD = os.environ.get('DCI_PASSWORD', 'admin')
DCI_PASSWORD_HASH = auth.hash_password(DCI_PASSWORD)


def main():
    conf = dci_config.generate_conf()
    db_uri = conf['SQLALCHEMY_DATABASE_URI']
    if functions.database_exists(db_uri):
        functions.drop_database(db_uri)
        functions.create_database(db_uri)

    dci_alembic.sync()
    engine = sqlalchemy.create_engine(db_uri)

    session = Session(engine)

    # roles
    super_admin_role = Role(name='Super Admin', label='SUPER_ADMIN', description='Admin of the platform')
    product_owner_role = Role(name='Product Owner', label='PRODUCT_OWNER', description='Product Owner')
    admin_role = Role(name='Admin', label='ADMIN', description='Admin of a team')
    user_role = Role(name='User', label='USER', description='Regular User')
    remoteci_role = Role(name='RemoteCI', label='REMOTECI', description='A RemoteCI')
    feeder_role = Role(name='Feeder', label='FEEDER', description='A Feeder')
    session.add_all([super_admin_role, product_owner_role, admin_role, user_role, remoteci_role, feeder_role])

    # teams
    admin_team = Team(name="admin")
    session.flush()
    session.add(admin_team)
    openstack_team = Team(name="OpenStack", parent_id=admin_team.id)
    ansible_team = Team(name="Ansible", parent_id=admin_team.id)
    session.add_all([openstack_team, ansible_team])
    session.flush()
    dell_team = Team(name="Dell", parent_id=openstack_team.id)
    hp_team = Team(name="HP", parent_id=openstack_team.id)
    cisco_team = Team(name="Cisco", parent_id=ansible_team.id)
    session.add_all([dell_team, hp_team, cisco_team])
    session.flush()

    # users
    super_admin = User(name=DCI_LOGIN, password=DCI_PASSWORD_HASH, role_id=super_admin_role.id, team_id=admin_team.id, fullname='Admin', email='admin@example.org')
    ansible_po = User(name='ansible_po', password=auth.hash_password('ansible_po'), role_id=product_owner_role.id, team_id=ansible_team.id, fullname='Ansible PO', email='ansible_po@example.org')
    openstack_po = User(name='openstack_po', password=auth.hash_password('openstack_po'), role_id=product_owner_role.id, team_id=openstack_team.id, fullname='OpenStack PO', email='openstack_po@example.org')
    admin_cisco = User(name='admin_cisco', password=auth.hash_password('admin_cisco'), role_id=admin_role.id, team_id=cisco_team.id, fullname='Admin Cisco', email='admin_cisco@example.org')
    admin_hp = User(name='admin_hp', password=auth.hash_password('admin_hp'), role_id=admin_role.id, team_id=hp_team.id, fullname='Admin HP', email='admin_hp@example.org')
    admin_dell = User(name='admin_dell', password=auth.hash_password('admin_dell'), role_id=admin_role.id, team_id=dell_team.id, fullname='Admin Dell', email='admin_dell@example.org')
    user_cisco = User(name='user_cisco', password=auth.hash_password('user_cisco'), role_id=user_role.id, team_id=cisco_team.id, fullname='User Cisco', email='user_cisco@example.org')
    user_hp = User(name='user_hp', password=auth.hash_password('user_hp'), role_id=user_role.id, team_id=hp_team.id, fullname='User HP', email='user_hp@example.org')
    user_dell = User(name='user_dell', password=auth.hash_password('user_dell'), role_id=user_role.id, team_id=dell_team.id, fullname='User Dell', email='user_dell@example.org')
    session.add_all([super_admin, ansible_po, openstack_po, admin_cisco, admin_hp, admin_dell, user_cisco, user_hp, user_dell])
    session.flush()

    # products
    openstack = Product(name='OpenStack', label='OPENSTACK', team_id=openstack_team.id)
    ansible = Product(name='Ansible', label='ANSIBLE', team_id=ansible_team.id)
    session.add_all([openstack, ansible])
    session.flush()

    # topics
    osp12 = Topic(name='OSP12', component_types=['puddle'], product_id=openstack.id)
    session.add(osp12)
    session.flush()
    osp11 = Topic(name='OSP11', component_types=['puddle'], next_topic=osp12.id, product_id=openstack.id)
    session.add(osp11)
    session.flush()
    osp10 = Topic(name='OSP10', component_types=['puddle'], next_topic=osp11.id, product_id=openstack.id)
    session.add(osp10)
    ansible_devel = Topic(name='ansible-devel', component_types=['snapshot_ansible'], product_id=ansible.id)
    session.add(ansible_devel)
    session.flush()
    ansible_24 = Topic(name='ansible-2.4', component_types=['snapshot_ansible'], next_topic=ansible_devel.id, product_id=ansible.id)
    session.add(ansible_24)
    session.flush()

    # associate topics to teams
    session.add_all([
        TopicTeam(team_id=dell_team.id, topic_id=osp10.id),
        TopicTeam(team_id=dell_team.id, topic_id=osp11.id),
        TopicTeam(team_id=dell_team.id, topic_id=osp12.id),
        TopicTeam(team_id=ansible_team.id, topic_id=ansible_devel.id),
        TopicTeam(team_id=ansible_team.id, topic_id=ansible_24.id),
    ])
    session.flush()

    # components
    component_osp10 = Component(name='RH7-RHOS-10.0 2016-10-28.1', type='puddle', topic_id=osp10.id)
    component_osp11 = Component(name='RH7-RHOS-11.0 2016-11-11.1', type='puddle', topic_id=osp11.id)
    component_osp12 = Component(name='RH7-RHOS-12.0 2016-11-12.2', type='puddle', topic_id=osp12.id)
    session.add_all([
        component_osp10,
        component_osp11,
        Component(name='RH7-RHOS-12.0 2016-11-12.1', type='puddle', topic_id=osp12.id),
        component_osp12,
        Component(name='Ansible devel', type='snapshot_ansible', topic_id=ansible_devel.id),
        Component(name='Ansible 2.4', type='snapshot_ansible', topic_id=ansible_24.id),
    ])
    session.flush()

    # remoteci
    dell_remoteci = Remoteci(name='Remoteci Dell 1', team_id=dell_team.id)
    session.add_all([
        dell_remoteci,
        Remoteci(name='Remoteci Dell 2', team_id=dell_team.id),
        Remoteci(name='Remoteci Ansible', team_id=ansible_team.id)
    ])
    session.flush()

    # jobs
    job1 = Job(topic_id=osp10.id, team_id=dell_team.id, remoteci_id=dell_remoteci.id)
    job2 = Job(topic_id=osp10.id, team_id=dell_team.id, remoteci_id=dell_remoteci.id)
    job3 = Job(topic_id=osp11.id, team_id=dell_team.id, remoteci_id=dell_remoteci.id)
    job4 = Job(topic_id=osp12.id, team_id=dell_team.id, remoteci_id=dell_remoteci.id)
    session.add_all([
        job1,
        job2,
        job3,
        job4,
    ])
    session.flush()

    # jobs_components
    session.add_all([
        JobComponent(component_id=component_osp10.id, job_id=job1.id),
        JobComponent(component_id=component_osp10.id, job_id=job2.id),
        JobComponent(component_id=component_osp11.id, job_id=job3.id),
        JobComponent(component_id=component_osp12.id, job_id=job4.id),
    ])
    session.flush()

    # commit
    session.commit()


if __name__ == '__main__':
    main()
