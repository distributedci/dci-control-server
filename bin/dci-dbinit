#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

"""
This module will initialize the database with the admin user and group based
on DCI environment variable.
"""

from multiprocessing import synchronize
import os

import sqlalchemy
from sqlalchemy_utils import functions as sa_funcs
from sqlalchemy.orm import sessionmaker

from dci import auth
from dci.db import models2
from dci import dci_config
from dci.alembic import utils as dci_alembic


DCI_LOGIN = os.environ.get("DCI_LOGIN", "admin")
DCI_PASSWORD = os.environ.get("DCI_PASSWORD", "admin")
DCI_PASSWORD_HASH = auth.hash_password(DCI_PASSWORD)


def init_db(session):
    def db_insert_with_name(model_item, **kwargs):
        resource = (
            session.query(model_item).filter(model_item.name == kwargs["name"]).first()
        )
        if resource is None:
            resource = model_item(**kwargs)
            session.add(resource)
        else:
            session.query(model_item).filter(model_item.name == kwargs["name"]).update(kwargs)

        return resource

    # Create team admin
    team_admin = db_insert_with_name(models2.Team, name="admin")
    # Create Red Hat team
    db_insert_with_name(models2.Team, name="Red Hat")
    db_insert_with_name(models2.Team, name="EPM")

    # Create super admin user
    super_admin = db_insert_with_name(
        models2.User,
        name=DCI_LOGIN,
        password=DCI_PASSWORD_HASH,
        fullname="Admin",
        email="admin@example.org",
    )

    super_admin.team.append(team_admin)
    session.add(super_admin)

    session.commit()


def main():
    conf = dci_config.CONFIG
    db_uri = conf["SQLALCHEMY_DATABASE_URI"]

    if not sa_funcs.database_exists(db_uri):
        sa_funcs.create_database(db_uri)

    dci_alembic.sync()
    engine = sqlalchemy.create_engine(db_uri)
    session = sessionmaker(bind=engine)()
    init_db(session)
    session.close()


if __name__ == "__main__":
    main()
