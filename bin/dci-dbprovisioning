#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# !/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015-2016 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
import time

import os

import sys

import dci.auth as auth
import dci.db.models as models
import functools

import requests

from dci import dci_config

conf = dci_config.generate_conf()


def get(endpoint, user=('admin', 'admin')):
    return requests.get('http://api:5000/api/v1/%s' % endpoint, auth=user)


def post(endpoint, json, user=('admin', 'admin')):
    return requests.post(
        'http://api:5000/api/v1/%s' % endpoint,
        json=json,
        auth=user
    )


def delete(endpoint, user=('admin', 'admin')):
    return requests.delete('http://api:5000/api/v1/%s' % endpoint, auth=user)


def create_teams():
    teams = {}
    for team in ['Red Hat', 'Dell']:
        r = post('teams', {'name': team})
        teams[team] = r.json()['team']
    return teams


def create_user(fullname, team_id, role):
    name = fullname.lower().replace(' ', '_')
    r = post('users', {
        'name': name,
        'fullname': fullname,
        'email': '%s@example.org' % name,
        'team_id': team_id,
        'role_id': role['id'],
        'password': name
    })
    return r.json()['user']


def get_roles():
    roles = {}
    for role in get('roles').json()['roles']:
        roles[role['label']] = role
    return roles


def create_users(teams):
    roles = get_roles()
    users = {}
    admin_red_hat = create_user('Admin Red Hat', teams['Red Hat']['id'], roles['ADMIN'])
    user_red_hat = create_user('User Red Hat', teams['Red Hat']['id'], roles['USER'])
    admin_dell = create_user('Admin Dell', teams['Dell']['id'], roles['ADMIN'])
    for user in [admin_red_hat, user_red_hat, admin_dell]:
        users[user['name']] = user
    return users


def create_topic(name, component_types, next_topic=None):
    t = {'name': name, 'component_types': component_types}
    if next_topic:
        t['next_topic'] = next_topic['id']
    r = post('topics', t)
    return r.json()['topic']


def create_topics():
    osp10 = create_topic('OSP10', ['puddle'])
    osp11 = create_topic('OSP11', ['puddle'], osp10)
    osp12 = create_topic('OSP12', ['puddle'], osp11)
    ansible = create_topic('Ansible 2.4', ['puddle'])
    topics = {}
    topics[osp10['name']] = osp10
    topics[osp11['name']] = osp11
    topics[osp12['name']] = osp12
    topics[ansible['name']] = ansible
    return topics


def associate_topics_to_teams(topics, teams):
    for topic, topic_value in topics.items():
        for team, team_value in teams.items():
            post('topics/%s/teams' % topic_value['id'], {'team_id': team_value['id']})


def create_component(name, topic):
    r = post('components', {
        'name': name,
        'type': topic['component_types'][0],
        'topic_id': topic['id'],
        'export_control': True
    })
    return r.json()['component']


def create_components(topics):
    components = {}
    for component in [
        {'name': 'RH7-RHOS-10.0 2016-10-28.1', 'topic_name': 'OSP10'},
        {'name': 'RH7-RHOS-11.0 2016-11-11.1', 'topic_name': 'OSP11'},
        {'name': 'RH7-RHOS-12.0 2016-11-12.1', 'topic_name': 'OSP12'},
        {'name': 'RH7-RHOS-12.0 2016-11-12.2', 'topic_name': 'OSP12'},
        {'name': 'Ansible 2.4', 'topic_name': 'Ansible 2.4'},
    ]:
        c = create_component(component['name'], topics[component['topic_name']])
        components[c['topic_id']] = c
    return components


def create_remotecis(teams):
    remotecis = {}
    for team, value in teams.items():
        name = 'Remoteci %s' % team
        r = post('remotecis', {'name': name, 'team_id': value['id'], 'allow_upgrade_job': True})
        remotecis[team] = r.json()['remoteci']
    return remotecis


def create_jobdefinition(topic):
    r = post('jobdefinitions', {'name': 'Job definition %s' % topic['name'], 'topic_id': topic['id']})
    return r.json()['jobdefinition']


def create_jobs(topics, remotecis, teams, components):
    OSP10_component_id = components[topics['OSP10']['id']]['id']
    OSP11_component_id = components[topics['OSP11']['id']]['id']
    OSP12_component_id = components[topics['OSP12']['id']]['id']

    jobs = [
        {
            'team_id': teams['Dell']['id'],
            'remoteci_id': remotecis['Dell']['id'],
            'jobdefinition_id': create_jobdefinition(topics['OSP10'])['id'],
            'topic_id': topics['OSP10']['id'],
            'components': [OSP10_component_id]
        },
        {
            'team_id': teams['Dell']['id'],
            'remoteci_id': remotecis['Dell']['id'],
            'jobdefinition_id': create_jobdefinition(topics['OSP10'])['id'],
            'topic_id': topics['OSP10']['id'],
            'components': [OSP10_component_id]
        },
        {
            'team_id': teams['Dell']['id'],
            'remoteci_id': remotecis['Dell']['id'],
            'jobdefinition_id': create_jobdefinition(topics['OSP11'])['id'],
            'topic_id': topics['OSP11']['id'],
            'components': [OSP11_component_id]
        },
        {
            'team_id': teams['Dell']['id'],
            'remoteci_id': remotecis['Dell']['id'],
            'jobdefinition_id': create_jobdefinition(topics['OSP12'])['id'],
            'topic_id': topics['OSP12']['id'],
            'components': [OSP12_component_id]
        },
    ]
    for job in jobs:
        post('jobs', job, ('admin_dell', 'admin_dell',))

    return get('jobs', ('admin_dell', 'admin_dell',)).json()['jobs']


def create_job_states(jobs):
    jobstates = [
        {'job_id': jobs[0]['id'], 'status': 'running'},
        {'job_id': jobs[1]['id'], 'status': 'success'},
        {'job_id': jobs[2]['id'], 'status': 'success'},
        {'job_id': jobs[3]['id'], 'status': 'failure'},
    ]
    for jobstate in jobstates:
        post('jobstates', jobstate, ('admin_dell', 'admin_dell',))


def create_file(job_id, file_name, file_path, user):
    file_path = os.path.join(file_path)
    data = open(file_path).read()
    headers = {'DCI-JOB-ID': job_id, 'DCI-NAME': file_name, 'DCI-MIME': 'application/junit',
               'Content-Disposition': 'attachment; filename=%s' % os.path.basename(file_path),
               'Content-Type': 'application/junit'}
    return requests.post(
        'http://api:5000/api/v1/files',
        data=data,
        headers=headers,
        auth=user
    )


def create_files(jobs):
    create_file(jobs[2]['id'], 'Tempest', 'tests/data/tempest-results.xml', ('admin_dell', 'admin_dell',))
    create_file(jobs[2]['id'], 'Rally', 'tests/data/rally-results.xml', ('admin_dell', 'admin_dell',))


def wait_db_ready():
    r = get('users/me')
    while r.status_code != 200:
        time.sleep(1)
        r = get('users/me')


def delete_default_topic():
    default_topic = get('topics').json()['topics'][0]
    delete('topics/%s' % default_topic['id'])


def main():
    wait_db_ready()
    teams = create_teams()
    create_users(teams)
    delete_default_topic()
    topics = create_topics()
    associate_topics_to_teams(topics, teams)
    components = create_components(topics)
    remotecis = create_remotecis(teams)
    jobs = create_jobs(topics, remotecis, teams, components)
    create_job_states(jobs)
    create_files(jobs)


if __name__ == '__main__':
    main()
