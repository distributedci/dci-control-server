#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
import json
import os
import time

import requests
from dci import settings
from dciauth.signature import Signature
from dciauth.request import AuthRequest

DCI_LOGIN = os.environ.get("DCI_LOGIN", "admin")
DCI_PASSWORD = os.environ.get("DCI_PASSWORD", "admin")
DEFAULT_DCI_CS_URL = "http://{host}:{port}".format(
    host=settings.HOST, port=settings.PORT
)
DCI_CS_URL = os.environ.get("DCI_CS_URL", DEFAULT_DCI_CS_URL)

PARTNER = (
    "partner",
    "partner",
)


def get_url(endpoint, subresource=None):
    return "%s/api/v1/%s" % (DCI_CS_URL, endpoint)


def get(endpoint, user=(DCI_LOGIN, DCI_PASSWORD,), params={}):
    url = get_url(endpoint)
    print("-------------")
    print("GET %s" % url)
    return requests.get(url, auth=user, params=params)


def post(endpoint, data, user=(DCI_LOGIN, DCI_PASSWORD,)):
    url = get_url(endpoint)
    print("-------------")
    print("POST %s" % url)
    print(json.dumps(data, indent=2))
    return requests.post(url, json=data, auth=user)


def associate_user_to_team(team_id, user_id, user=(DCI_LOGIN, DCI_PASSWORD,)):
    url = "%s/api/v1/teams/%s/users/%s" % (DCI_CS_URL, team_id, user_id)
    print("-------------")
    print("POST %s" % url)
    return requests.post(url, json={}, auth=user)


def delete(endpoint, user=(DCI_LOGIN, DCI_PASSWORD,)):
    url = get_url(endpoint)
    print("DELETE %s" % url)
    return requests.delete(url, auth=user)


def get_or_create_team(name):
    r = post("teams", {"name": name})
    if r.status_code == 409:
        return get("teams", params={"where": "name:" + name}).json()["teams"][0]
    return r.json()["team"]


def create_teams():
    return {
        "admin": get_or_create_team("admin"),
        "Red Hat": get_or_create_team("Red Hat"),
        "partner": get_or_create_team("partner"),
        "EPM": get_or_create_team("EPM"),
    }


def get_or_create_user(fullname, team):
    name = fullname.lower().replace(" ", "_")
    r = post(
        "users",
        {
            "name": name,
            "fullname": fullname,
            "email": "%s@example.org" % name,
            "password": name,
        },
    )
    if r.status_code == 409:
        user = get("users", params={"where": "name:" + name}).json()["users"][0]
        associate_user_to_team(team["id"], user["id"])
        return user
    user = r.json()["user"]
    associate_user_to_team(team["id"], user["id"])
    return user


def create_users(teams):
    return {
        "dci": get_or_create_user("dci", teams["Red Hat"]),
        "partner": get_or_create_user("partner", teams["partner"]),
        "epm": get_or_create_user("EPM", teams["EPM"]),
    }


def get_or_create_product(product):
    r = post(
        "products",
        {
            "name": product,
            "label": product.upper(),
            "description": "description for %s" % product,
        },
    )
    if r.status_code == 409:
        return get("products", params={"where": "name:" + product}).json()["products"][
            0
        ]
    return r.json()["product"]


def create_products(teams):
    return {
        "OpenStack": get_or_create_product("OpenStack"),
        "RHEL": get_or_create_product("RHEL"),
        "OCP": get_or_create_product("OCP"),
    }


def get_or_create_topic(name, component_types, product, next_topic=None):
    r = post(
        "topics",
        {
            "name": name,
            "component_types": component_types,
            "product_id": product["id"],
            "export_control": True,
        },
    )
    if r.status_code == 409:
        return get("topics", params={"where": "name:" + name}).json()["topics"][0]
    return r.json()["topic"]


def create_topics(products):
    openstack = products["OpenStack"]
    rhel = products["RHEL"]
    ocp = products["OCP"]

    osp16 = get_or_create_topic("OSP16", ["puddle"], openstack)
    osp13 = get_or_create_topic("OSP13", ["puddle"], openstack)

    rhel8milestone = get_or_create_topic("RHEL-8-milestone", ["Compose"], rhel)
    rhel8nightly = get_or_create_topic("RHEL-8-nightly", ["Compose"], rhel)
    rhel82milestone = get_or_create_topic("RHEL-8.2-milestone", ["Compose"], rhel)

    ocp43 = get_or_create_topic("OCP-4.3", ["puddle_ocp"], ocp)
    ocp44 = get_or_create_topic("OCP-4.4", ["puddle_ocp"], ocp)

    return {
        "OSP16": osp16,
        "OSP13": osp13,
        "RHEL-8-milestone": rhel8milestone,
        "RHEL-8-nightly": rhel8nightly,
        "RHEL-8.2-milestone": rhel82milestone,
        "OCP-4.3": ocp43,
        "OCP-4.4": ocp44,
    }


def associate_products_to_teams(products, teams):
    for product, product_value in products.items():
        for team, team_value in teams.items():
            post(
                "products/%s/teams" % product_value["id"], {"team_id": team_value["id"]}
            )


def get_or_create_component(name, topic):
    r = post(
        "components",
        {"name": name, "type": topic["component_types"][0], "topic_id": topic["id"]},
    )
    if r.status_code == 409:
        return get(
            "topics/%s/components" % topic["id"], params={"where": "name:" + name}
        ).json()["components"][0]
    return r.json()["component"]


def add_components_to_topics(topics):
    for component in [
        {"name": "RHEL-8.4.0-20201013.n.1", "topic_name": "RHEL-8-nightly"},
        {"name": "RHEL-8.2.0-20200404.0", "topic_name": "RHEL-8-milestone"},
        {"name": "RHEL-8.2.0-20200404.0", "topic_name": "RHEL-8.2-milestone"},
    ]:
        topic_name = component["topic_name"]
        c = get_or_create_component(component["name"], topics[topic_name])
        topics[topic_name]["components_ids"] = [c["id"]]
    return topics


def get_or_create_remoteci(name, team):
    r = post("remotecis", {"name": name, "team_id": team["id"]})
    if r.status_code == 409:
        return get("remotecis", params={"where": "name:" + name}).json()["remotecis"][0]
    return r.json()["remoteci"]


def create_remotecis(teams):
    remotecis = {}
    for team_name, team in teams.items():
        remoteci_name = "Remoteci %s" % team_name
        remoteci = get_or_create_remoteci(remoteci_name, team)
        remotecis[team_name] = remoteci
    return remotecis


def create_jobs(topics, remotecis, teams):
    jobs = [
        {
            "team_id": teams["partner"]["id"],
            "topic_id": topics["RHEL-8.2-milestone"]["id"],
            "components": topics["RHEL-8.2-milestone"]["components_ids"],
            "tags": ["releng", "rhel"],
            "comment": "releng job comment",
        },
        {
            "team_id": teams["partner"]["id"],
            "topic_id": topics["RHEL-8-nightly"]["id"],
            "components": topics["RHEL-8-nightly"]["components_ids"],
            "tags": ["nightly", "rhel"],
        },
    ]
    client_id = remotecis["partner"]["id"]
    api_secret = remotecis["partner"]["api_secret"]
    for job in jobs:
        auth_request = AuthRequest(
            method="POST",
            endpoint="/api/v1/jobs",
            payload=job,
            headers={"content-type": "application/json"},
        )
        headers = Signature(request=auth_request).generate_headers(
            "remoteci", client_id, api_secret
        )
        r = requests.post("%s/api/v1/jobs" % DCI_CS_URL, headers=headers, json=job)

    return get("jobs", PARTNER).json()["jobs"]


def create_job_states(jobs):
    jobstates = [
        {"job_id": jobs[0]["id"], "status": "running"},
        {"job_id": jobs[0]["id"], "status": "success"},
        {"job_id": jobs[1]["id"], "status": "running"},
        {"job_id": jobs[1]["id"], "status": "error"},
    ]
    for jobstate in jobstates:
        post("jobstates", jobstate, PARTNER)


def create_file(job_id, file_name, file_path, user, content_type="application/junit"):
    file_path = os.path.join(file_path)
    data = open(file_path).read()
    headers = {
        "DCI-JOB-ID": job_id,
        "DCI-NAME": file_name,
        "DCI-MIME": content_type,
        "Content-Disposition": "attachment; filename=%s" % os.path.basename(file_path),
        "Content-Type": content_type,
    }
    return requests.post(
        "%s/api/v1/files" % DCI_CS_URL, data=data, headers=headers, auth=user
    )


def create_files(jobs):
    create_file(jobs[0]["id"], "Tempest", "tests/data/tempest-results.xml", PARTNER)
    create_file(jobs[0]["id"], "Rally", "tests/data/rally-results.xml", PARTNER)
    create_file(
        jobs[0]["id"], "Rally", "tests/data/rally-results.regression.xml", PARTNER
    )
    create_file(
        jobs[0]["id"],
        "certification.xml.gz",
        "tests/data/certification.xml.tar.gz",
        PARTNER,
        "application/x-compressed",
    )


def wait_db_ready():
    while True:
        try:
            r = get("identity")
            if r.status_code == 200:
                break
        except requests.exceptions.ConnectionError:
            continue
        finally:
            time.sleep(1)


def main():
    # wait_db_ready()
    teams = create_teams()
    create_users(teams)
    products = create_products(teams)
    associate_products_to_teams(products, teams)
    topics = create_topics(products)
    topics = add_components_to_topics(topics)
    remotecis = create_remotecis(teams)
    jobs = create_jobs(topics, remotecis, teams)
    create_job_states(jobs)
    create_files(jobs)


if __name__ == "__main__":
    main()
