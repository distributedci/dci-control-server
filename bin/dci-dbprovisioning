#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


# import json
# import os
# import time
#
# import requests
#
# DCI_LOGIN = os.environ.get('DCI_LOGIN', 'admin')
# DCI_PASSWORD = os.environ.get('DCI_PASSWORD', 'admin')
# DCI_CS_URL = os.environ.get('DCI_CS_URL', 'http://localhost:5000')
#
#
# def get_url(endpoint):
#     return '%s/api/v1/%s' % (DCI_CS_URL, endpoint)
#
#
# def get(endpoint, user=(DCI_LOGIN, DCI_PASSWORD,)):
#     url = get_url(endpoint)
#     print('-------------')
#     print('GET %s' % url)
#     return requests.get(url, auth=user)
#
#
# def post(endpoint, data, user=(DCI_LOGIN, DCI_PASSWORD,)):
#     url = get_url(endpoint)
#     print('-------------')
#     print('POST %s' % url)
#     print(json.dumps(data, indent=2))
#     return requests.post(url, json=data, auth=user)
#
#
# def delete(endpoint, user=(DCI_LOGIN, DCI_PASSWORD,)):
#     url = get_url(endpoint)
#     print('DELETE %s' % url)
#     return requests.delete(url, auth=user)
#
#
# def get_teams():
#     teams = {}
#     for team in get('teams').json()['teams']:
#         teams[team['name']] = team
#     return teams
#
#
# def create_team(name, parent_team):
#     r = post('teams', {'name': name, 'parent_id': parent_team['id']})
#     return r.json()['team']
#
#
# def create_teams():
#     team_admin = get_teams()['admin']
#     openstack = create_team('OpenStack', team_admin)
#     ansible = create_team('Ansible', team_admin)
#     return {
#         'OpenStack': openstack,
#         'Dell': create_team('Dell', openstack),
#         'HP': create_team('HP', openstack),
#         'Ansible': ansible,
#         'Cisco': create_team('Cisco', ansible),
#     }
#
#
# def create_user(fullname, team, role):
#     name = fullname.lower().replace(' ', '_')
#     r = post('users', {
#         'name': name,
#         'fullname': fullname,
#         'email': '%s@example.org' % name,
#         'team_id': team['id'],
#         'role_id': role['id'],
#         'password': name
#     })
#     return r.json()['user']
#
#
# def get_roles():
#     roles = {}
#     for role in get('roles').json()['roles']:
#         roles[role['label']] = role
#     return roles
#
#
# def create_users(teams):
#     roles = get_roles()
#     return {
#         'ansible_po': create_user('Ansible PO', teams['Ansible'], roles['PRODUCT_OWNER']),
#         'openstack_po': create_user('OpenStack PO', teams['OpenStack'], roles['PRODUCT_OWNER']),
#         'admin_cisco': create_user('Admin Cisco', teams['Cisco'], roles['ADMIN']),
#         'admin_hp': create_user('Admin HP', teams['HP'], roles['ADMIN']),
#         'admin_dell': create_user('Admin Dell', teams['Dell'], roles['ADMIN']),
#         'user_cisco': create_user('User Cisco', teams['Cisco'], roles['USER']),
#         'user_hp': create_user('User HP', teams['HP'], roles['USER']),
#         'user_dell': create_user('User Dell', teams['Dell'], roles['USER'])
#     }
#
#
# def create_product(product, team):
#     r = post('products', {
#         'name': product,
#         'label': product.upper(),
#         'description': 'description for %s' % product,
#         'team_id': team['id']
#     })
#     return r.json()['product']
#
#
# def create_products(teams):
#     return {
#         'OpenStack': create_product('OpenStack', teams['OpenStack']),
#         'Ansible': create_product('Ansible', teams['Ansible'])
#     }
#
#
# def create_topic(name, component_types, next_topic=None):
#     t = {'name': name, 'component_types': component_types}
#     if next_topic:
#         t['next_topic'] = next_topic['id']
#     r = post('topics', t)
#     return r.json()['topic']
#
#
# def create_topics():
#     osp12 = create_topic('OSP12', ['puddle'])
#     osp11 = create_topic('OSP11', ['puddle'], osp12)
#     ansible_devel = create_topic('ansible-devel', ['snapshot_ansible'])
#     return {
#         'OSP12': osp12,
#         'OSP11': osp11,
#         'OSP10': create_topic('OSP10', ['puddle'], osp11),
#         'ansible-devel': ansible_devel,
#         'ansible-2.4': create_topic('ansible-2.4', ['snapshot_ansible'], ansible_devel),
#     }
#
#
# def associate_topics_to_teams(topics, teams):
#     for topic, topic_value in topics.items():
#         for team, team_value in teams.items():
#             post('topics/%s/teams' % topic_value['id'], {'team_id': team_value['id']})
#
#
# def create_component(name, topic):
#     r = post('components', {
#         'name': name,
#         'type': topic['component_types'][0],
#         'topic_id': topic['id'],
#         'export_control': True
#     })
#     return r.json()['component']
#
#
# def create_components(topics):
#     components = {}
#     for component in [
#         {'name': 'RH7-RHOS-10.0 2016-10-28.1', 'topic_name': 'OSP10'},
#         {'name': 'RH7-RHOS-11.0 2016-11-11.1', 'topic_name': 'OSP11'},
#         {'name': 'RH7-RHOS-12.0 2016-11-12.1', 'topic_name': 'OSP12'},
#         {'name': 'RH7-RHOS-12.0 2016-11-12.2', 'topic_name': 'OSP12'},
#         {'name': 'Ansible devel', 'topic_name': 'ansible-devel'},
#         {'name': 'Ansible 2.4', 'topic_name': 'ansible-2.4'},
#     ]:
#         c = create_component(component['name'], topics[component['topic_name']])
#         components[c['topic_id']] = c
#     return components
#
#
# def create_remotecis(teams):
#     remotecis = {}
#     for team, value in teams.items():
#         name = 'Remoteci %s' % team
#         r = post('remotecis', {'name': name, 'team_id': value['id'], 'allow_upgrade_job': True})
#         remotecis[team] = r.json()['remoteci']
#     return remotecis
#
#
# def create_jobs(topics, remotecis, teams, components):
#     osp10_component_id = components[topics['OSP10']['id']]['id']
#     osp11_component_id = components[topics['OSP11']['id']]['id']
#     osp12_component_id = components[topics['OSP12']['id']]['id']
#
#     jobs = [
#         {
#             'team_id': teams['Dell']['id'],
#             'remoteci_id': remotecis['Dell']['id'],
#             'topic_id': topics['OSP10']['id'],
#             'components': [osp10_component_id]
#         },
#         {
#             'team_id': teams['Dell']['id'],
#             'remoteci_id': remotecis['Dell']['id'],
#             'topic_id': topics['OSP10']['id'],
#             'components': [osp10_component_id]
#         },
#         {
#             'team_id': teams['Dell']['id'],
#             'remoteci_id': remotecis['Dell']['id'],
#             'topic_id': topics['OSP11']['id'],
#             'components': [osp11_component_id]
#         },
#         {
#             'team_id': teams['Dell']['id'],
#             'remoteci_id': remotecis['Dell']['id'],
#             'topic_id': topics['OSP12']['id'],
#             'components': [osp12_component_id]
#         },
#     ]
#     for job in jobs:
#         post('jobs', job, ('admin_dell', 'admin_dell',))
#
#     return get('jobs', ('admin_dell', 'admin_dell',)).json()['jobs']
#
#
# def create_job_states(jobs):
#     jobstates = [
#         {'job_id': jobs[0]['id'], 'status': 'running'},
#         {'job_id': jobs[1]['id'], 'status': 'success'},
#         {'job_id': jobs[2]['id'], 'status': 'success'},
#         {'job_id': jobs[3]['id'], 'status': 'failure'},
#     ]
#     for jobstate in jobstates:
#         post('jobstates', jobstate, ('admin_dell', 'admin_dell',))
#
#
# def create_file(job_id, file_name, file_path, user):
#     file_path = os.path.join(file_path)
#     data = open(file_path).read()
#     headers = {'DCI-JOB-ID': job_id, 'DCI-NAME': file_name, 'DCI-MIME': 'application/junit',
#                'Content-Disposition': 'attachment; filename=%s' % os.path.basename(file_path),
#                'Content-Type': 'application/junit'}
#     return requests.post(
#         '%s/api/v1/files' % DCI_CS_URL,
#         data=data,
#         headers=headers,
#         auth=user
#     )
#
#
# def create_files(jobs):
#     user_dell = ('admin_dell', 'admin_dell',)
#     create_file(jobs[2]['id'], 'Tempest', 'tests/data/tempest-results.xml', user_dell)
#     create_file(jobs[2]['id'], 'Rally', 'tests/data/rally-results.xml', user_dell)
#
#
# def wait_db_ready():
#     while True:
#         try:
#             r = get('identity')
#             if r.status_code == 200:
#                 break
#         except requests.exceptions.ConnectionError:
#             continue
#         finally:
#             time.sleep(1)
#

# !/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
import os

import sqlalchemy
from sqlalchemy.orm import Session

from dci import auth
from dci.db.orm import *
from dci import dci_config

DCI_LOGIN = os.environ.get('DCI_LOGIN', 'admin')
DCI_PASSWORD = os.environ.get('DCI_PASSWORD', 'admin')
DCI_PASSWORD_HASH = auth.hash_password(DCI_PASSWORD)


def main():
    conf = dci_config.generate_conf()
    db_uri = conf['SQLALCHEMY_DATABASE_URI']
    engine = sqlalchemy.create_engine(db_uri)

    session = Session(engine)

    # teams
    admin_team = session.query(Team).filter_by(name='admin').first()
    openstack_team = Team(name="OpenStack", parent_id=admin_team.id)
    ansible_team = Team(name="Ansible", parent_id=admin_team.id)
    session.add_all([openstack_team, ansible_team])
    session.flush()
    dell_team = Team(name="Dell", parent_id=openstack_team.id)
    hp_team = Team(name="HP", parent_id=openstack_team.id)
    cisco_team = Team(name="Cisco", parent_id=ansible_team.id)
    session.add_all([dell_team, hp_team, cisco_team])
    session.flush()

    # roles
    super_admin_role = session.query(Role).filter_by(label='SUPER_ADMIN').first()
    product_owner_role = session.query(Role).filter_by(label='PRODUCT_OWNER').first()
    admin_role = session.query(Role).filter_by(label='ADMIN').first()
    user_role = session.query(Role).filter_by(label='USER').first()
    remoteci_role = session.query(Role).filter_by(label='REMOTECI').first()
    feeder_role = session.query(Role).filter_by(label='FEEDER').first()

    # users
    ansible_po = User(name='ansible_po', password=auth.hash_password('ansible_po'), role_id=product_owner_role.id,
                      team_id=ansible_team.id, fullname='Ansible PO', email='ansible_po@example.org')
    openstack_po = User(name='openstack_po', password=auth.hash_password('openstack_po'), role_id=product_owner_role.id,
                        team_id=openstack_team.id, fullname='OpenStack PO', email='openstack_po@example.org')
    admin_cisco = User(name='admin_cisco', password=auth.hash_password('admin_cisco'), role_id=admin_role.id,
                       team_id=cisco_team.id, fullname='Admin Cisco', email='admin_cisco@example.org')
    admin_hp = User(name='admin_hp', password=auth.hash_password('admin_hp'), role_id=admin_role.id, team_id=hp_team.id,
                    fullname='Admin HP', email='admin_hp@example.org')
    admin_dell = User(name='admin_dell', password=auth.hash_password('admin_dell'), role_id=admin_role.id,
                      team_id=dell_team.id, fullname='Admin Dell', email='admin_dell@example.org')
    user_cisco = User(name='user_cisco', password=auth.hash_password('user_cisco'), role_id=user_role.id,
                      team_id=cisco_team.id, fullname='User Cisco', email='user_cisco@example.org')
    user_hp = User(name='user_hp', password=auth.hash_password('user_hp'), role_id=user_role.id, team_id=hp_team.id,
                   fullname='User HP', email='user_hp@example.org')
    user_dell = User(name='user_dell', password=auth.hash_password('user_dell'), role_id=user_role.id,
                     team_id=dell_team.id, fullname='User Dell', email='user_dell@example.org')
    session.add_all([ansible_po, openstack_po, admin_cisco, admin_hp, admin_dell, user_cisco, user_hp, user_dell])

    # products
    openstack = Product(name='OpenStack', label='OPENSTACK', team_id=openstack_team.id)
    ansible = Product(name='Ansible', label='ANSIBLE', team_id=ansible_team.id)
    session.add_all([openstack, ansible])

    # topics
    osp12 = Topic(name='OSP12', component_types=['puddle'], product_id=openstack.id)
    session.add(osp12)
    session.flush()
    osp11 = Topic(name='OSP11', component_types=['puddle'], next_topic=osp12.id, product_id=openstack.id)
    session.add(osp11)
    session.flush()
    osp10 = Topic(name='OSP10', component_types=['puddle'], next_topic=osp11.id, product_id=openstack.id)
    session.add(osp10)
    ansible_devel = Topic(name='ansible-devel', component_types=['snapshot_ansible'], product_id=ansible.id)
    session.add(ansible_devel)
    session.flush()
    ansible_devel = Topic(name='ansible-2.4', component_types=['snapshot_ansible'], next_topic=ansible_devel.id,
                          product_id=ansible.id)
    session.add(ansible_devel)

    # commit
    session.commit()

    for team in session.query(Team).all():
        print(team.name)

    for user in session.query(User).all():
        print(user.name)

    # wait_db_ready()
    # teams = create_teams()
    # create_users(teams)
    # create_products(teams)
    # topics = create_topics()
    # associate_topics_to_teams(topics, teams)
    # components = create_components(topics)
    # remotecis = create_remotecis(teams)
    # jobs = create_jobs(topics, remotecis, teams, components)
    # create_job_states(jobs)
    # create_files(jobs)


if __name__ == '__main__':
    main()
