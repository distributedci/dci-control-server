#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017 Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
import concurrent.futures as futures
import itertools
import json
import os
import time
from functools import partial

import requests
from dci import settings
from dciauth.signature import Signature
from dciauth.request import AuthRequest

DCI_LOGIN = os.environ.get('DCI_LOGIN', 'admin')
DCI_PASSWORD = os.environ.get('DCI_PASSWORD', 'admin')
DEFAULT_DCI_CS_URL = 'http://{host}:{port}'.format(host=settings.HOST, port=settings.PORT)
DCI_CS_URL = os.environ.get('DCI_CS_URL', DEFAULT_DCI_CS_URL)


def wrap(fun):
    def wrapper(arglist):
        return fun(*arglist)
    return wrapper


def get_url(endpoint, subresource=None):
    return '%s/api/v1/%s' % (DCI_CS_URL, endpoint)


def get(endpoint, user=(DCI_LOGIN, DCI_PASSWORD,)):
    url = get_url(endpoint)
    print('-------------')
    print('GET %s' % url)
    return requests.get(url, auth=user)


def post(endpoint, data, user=(DCI_LOGIN, DCI_PASSWORD,)):
    url = get_url(endpoint)
    print('-------------')
    print('POST %s' % url)
    print(json.dumps(data, indent=2))
    return requests.post(url, json=data, auth=user)


def associate_user_to_team(team_id, user_id, data, user=(DCI_LOGIN, DCI_PASSWORD,)):
    url = '%s/api/v1/teams/%s/users/%s' % (DCI_CS_URL, team_id, user_id)
    print('-------------')
    print('POST %s' % url)
    print(json.dumps(data, indent=2))
    return requests.post(url, json=data, auth=user)


def delete(endpoint, user=(DCI_LOGIN, DCI_PASSWORD,)):
    url = get_url(endpoint)
    print('DELETE %s' % url)
    return requests.delete(url, auth=user)


def get_teams():
    teams = {}
    for team in get('teams').json()['teams']:
        teams[team['name']] = team
    return teams


def create_team(name, parent_team):
    r = post('teams', {'name': name, 'parent_id': parent_team['id']})
    return r.json()['team']


def create_teams():
    team_admin = get_teams()['admin']
    main_teams = ['OpenStack', 'Ansible', 'RHEL', 'OpenShift']
    osp_teams = ['Dell', 'HP']
    ansible_teams = ['Cisco']
    rhel_teams = ['Veritas']

    with futures.ThreadPoolExecutor() as executor:
        teams = dict(zip(main_teams,
                    executor.map(partial(create_team, parent_team=team_admin), main_teams)))

    with futures.ThreadPoolExecutor() as executor:
        teams.update(dict(zip(osp_teams,
                         executor.map(partial(create_team, parent_team=teams['OpenStack']), osp_teams))))
    with futures.ThreadPoolExecutor() as executor:
        teams.update(dict(zip(ansible_teams,
                         executor.map(partial(create_team, parent_team=teams['Ansible']), ansible_teams))))
    with futures.ThreadPoolExecutor() as executor:
        teams.update(dict(zip(rhel_teams,
                         executor.map(partial(create_team, parent_team=teams['RHEL']), rhel_teams))))
    return teams


def create_user(fullname, team, role):
    name = fullname.lower().replace(' ', '_')
    r = post('users', {
        'name': name,
        'fullname': fullname,
        'email': '%s@example.org' % name,
        'team_id': team['id'],
        'password': name
    })
    user_id = r.json()['user']['id']
    team_id = team['id']
    associate_user_to_team(team_id, user_id, data={'role': role})
    return r.json()['user']


def create_users(teams):
    tocreate = {
        'ansible_po': ('Ansible PO', teams['Ansible'], 'PRODUCT_OWNER'),
        'openstack_po': ('OpenStack PO', teams['OpenStack'], 'PRODUCT_OWNER'),
        'rhel_po': ('RHEL PO', teams['RHEL'], 'PRODUCT_OWNER'),
        'rhel_user': ('user RHEL', teams['RHEL'], 'USER'),
        'user_cisco': ('User Cisco', teams['Cisco'], 'USER'),
        'user_hp': ('User HP', teams['HP'], 'USER'),
        'user_dell': ('User Dell', teams['Dell'], 'USER'),
        'user_veritas': ('User Veritas', teams['Veritas'], 'USER'),
    }

    with futures.ThreadPoolExecutor() as executor:
        users = dict(zip(tocreate.keys(),
                         executor.map(wrap(create_user), tocreate.values())
                         )
                     )
    return users


def create_product(product, team):
    r = post('products', {
        'name': product,
        'label': product.upper(),
        'description': 'description for %s' % product,
        'team_id': team['id']
    })
    return r.json()['product']


def create_products(teams):
    tocreate = {
        'OpenStack': ('OpenStack', teams['OpenStack']),
        'Ansible': ('Ansible', teams['Ansible']),
        'RHEL': ('RHEL', teams['RHEL']),
        'OCP': ('OCP', teams['OpenShift']),
    }

    with futures.ThreadPoolExecutor() as executor:
        products = dict(zip(tocreate.keys(),
                            executor.map(wrap(create_product), tocreate.values())
                            )
                        )
    return products


def create_topic(name, component_types, product, next_topic=None):
    topic = {'name': name, 'component_types': component_types, 'product_id': product['id']}
    if next_topic:
        topic['next_topic_id'] = next_topic['id']
    r = post('topics', topic)
    return r.json()['topic']


def create_topics(products):
    openstack = products['OpenStack']
    ansible = products['Ansible']
    rhel = products['RHEL']
    ocp = products['OCP']

    osp15 = create_topic('OSP15', ['puddle'], openstack)
    osp14 = create_topic('OSP14', ['puddle'], openstack, osp15)
    osp13 = create_topic('OSP13', ['puddle'], openstack, osp14)
    osp12 = create_topic('OSP12', ['puddle'], openstack, osp13)
    osp11 = create_topic('OSP11', ['puddle'], openstack, osp12)
    osp10 = create_topic('OSP10', ['puddle'], openstack, osp11)
    osp9 = create_topic('OSP9', ['puddle'], openstack, osp10)
    osp8 = create_topic('OSP8', ['puddle'], openstack, osp9)

    rdorocky = create_topic('RDO-Rocky', ['snapshot_rdo'], openstack)
    rdoqueens = create_topic('RDO-Queens', ['snapshot_rdo'], openstack, rdorocky)
    rdopike = create_topic('RDO-Pike', ['snapshot_rdo'], openstack, rdoqueens)
    rdoocata = create_topic('RDO-Ocata', ['snapshot_rdo'], openstack, rdopike)
    rdonewton = create_topic('RDO-Newton', ['snapshot_rdo'], openstack, rdoocata)

    ansible_dev = create_topic('ansible-devel', ['snapshot_ansible'], ansible)
    ansible_24 = create_topic('ansible-2.4', ['snapshot_ansible'], ansible, ansible_dev)
    ansible_27 = create_topic('Ansible-2.7', ['snapshot_ansible'], ansible)

    rhel8 = create_topic('RHEL-8', ['Compose'], rhel)
    rhel7 = create_topic('RHEL-7', ['Compose'], rhel, rhel8)
    rhel81 = create_topic('RHEL-8.1', ['Compose'], rhel)
    rhel80 = create_topic('RHEL-8.0', ['Compose'], rhel, rhel81)
    rhel77 = create_topic('RHEL-7.7', ['Compose'], rhel, rhel8)
    rhel76 = create_topic('RHEL-7.6', ['Compose'], rhel, rhel77)

    ocp40 = create_topic('OCP-4.0', ['puddle_ocp'], ocp)
    ocp311 = create_topic('OCP-3.11', ['puddle_ocp'], ocp)
    ocp310 = create_topic('OCP-3.10', ['puddle_ocp'], ocp, ocp311)

    return {
        'OSP15': osp15,
        'OSP14': osp14,
        'OSP13': osp13,
        'OSP12': osp12,
        'OSP11': osp11,
        'OSP10': osp10,
        'OSP9': osp9,
        'OSP8': osp8,
        'RDOROCKY': rdorocky,
        'RDOQUEENS': rdoqueens,
        'RDOPIKE': rdopike,
        'RDOOCATA': rdoocata,
        'RDONEWTON': rdonewton,
        'ansible-devel': ansible_dev,
        'ansible-2.4': ansible_24,
        'RHEL-8': rhel8,
        'RHEL-7': rhel7,
        'RHEL-7.6': rhel76,
        'RHEL-7.7': rhel77,
        'RHEL-8.0': rhel80,
        'RHEL-8.1': rhel81,
        'OCP-4.0': ocp40,
        'OCP-3.11': ocp311,
        'OCP-3.10': ocp310,
    }


def associate_topic_to_team(topic, team):
    post('topics/%s/teams' % topic['id'], {'team_id': team['id']})


def associate_topics_to_teams(topics, teams):
    with futures.ThreadPoolExecutor() as executor:
        for (topic, team) in itertools.product(topics.values(), teams.values()):
            executor.submit(associate_topic_to_team, topic, team)


def create_component(name, topic):
    r = post('components', {
        'name': name,
        'type': topic['component_types'][0],
        'topic_id': topic['id'],
        'export_control': True
    })
    return r.json()['component']


def create_components(topics):
    tocreate = (
        ('RH7-RHOS-10.0 2016-10-28.1', topics['OSP10']),
        ('RH7-RHOS-10.0 2016-11-12.1', topics['OSP10']),
        ('RH7-RHOS-11.0 2016-11-11.1', topics['OSP11']),
        ('RH7-RHOS-12.0 2016-11-12.1', topics['OSP12']),
        ('Ansible devel', topics['ansible-devel']),
        ('Ansible 2.4', topics['ansible-2.4']),
        ('RHEL-7.6-20180513.n.0', topics['RHEL-7']),
        ('RHEL-8.0-20180503.n.2', topics['RHEL-8'])
    )

    names = map(lambda x: x[0], tocreate)

    with futures.ThreadPoolExecutor() as executor:
        components = dict(zip(names,
                              executor.map(wrap(create_component), tocreate)
                              )
                          )
    return components


def create_remoteci(team):
    return post('remotecis', {'name': 'Remoteci %s' % team['name'], 'team_id': team['id']}).json()['remoteci']


def create_remotecis(teams):
    with futures.ThreadPoolExecutor() as executor:
        remotecis = dict(zip(teams.keys(),
                             executor.map(create_remoteci, teams.values())))
    return remotecis




def create_jobs(topics, remotecis, teams, components):
    jobs = [
        {
            'team_id': teams['Dell']['id'],
            'topic_id': topics['OSP10']['id'],
            'components': [components['RH7-RHOS-10.0 2016-10-28.1']['id']]
        },
        {
            'team_id': teams['Dell']['id'],
            'topic_id': topics['OSP10']['id'],
            'components': [components['RH7-RHOS-10.0 2016-11-12.1']['id']]
        },
        {
            'team_id': teams['Dell']['id'],
            'topic_id': topics['OSP11']['id'],
            'components': [components['RH7-RHOS-11.0 2016-11-11.1']['id']]
        },
        {
            'team_id': teams['Dell']['id'],
            'topic_id': topics['OSP12']['id'],
            'components': [components['RH7-RHOS-12.0 2016-11-12.1']['id']]
        },
    ]

    client_id = remotecis['Dell']['id']
    api_secret = remotecis['Dell']['api_secret']
    for job in jobs:
        auth_request = AuthRequest(method="POST", endpoint='/api/v1/jobs', payload=job,
                                   headers={'content-type': 'application/json'})
        headers = Signature(request=auth_request).generate_headers('remoteci', client_id, api_secret)
        requests.post('%s/api/v1/jobs' % DCI_CS_URL, headers=headers, json=job)

    return get('jobs', ('user_dell', 'user_dell',)).json()['jobs']


def create_job_states(jobs):
    jobstates = [
        {'job_id': jobs[0]['id'], 'status': 'running'},
        {'job_id': jobs[1]['id'], 'status': 'error'},
        {'job_id': jobs[2]['id'], 'status': 'failure'},
        {'job_id': jobs[3]['id'], 'status': 'success'},
    ]
    with futures.ThreadPoolExecutor() as executor:
        for jobstate in jobstates:
            executor.submit(post, 'jobstates', jobstate, ('user_dell', 'user_dell',))


def create_file(job_id, file_name, file_path, user, content_type='application/junit'):
    file_path = os.path.join(file_path)
    data = open(file_path).read()
    headers = {'DCI-JOB-ID': job_id, 'DCI-NAME': file_name, 'DCI-MIME': content_type,
               'Content-Disposition': 'attachment; filename=%s' % os.path.basename(file_path),
               'Content-Type': content_type}
    return requests.post(
        '%s/api/v1/files' % DCI_CS_URL,
        data=data,
        headers=headers,
        auth=user
    )


def create_files(jobs):
    user_dell = ('user_dell', 'user_dell',)
    with futures.ThreadPoolExecutor() as executor:
        executor.submit(create_file, jobs[3]['id'], 'Tempest', 'tests/data/tempest-results.xml',
                        user_dell)
        executor.submit(create_file, jobs[2]['id'], 'Tempest', 'tests/data/tempest-results.xml',
                        user_dell)
        executor.submit(create_file, jobs[3]['id'], 'Rally', 'tests/data/rally-results.xml',
                        user_dell)
        executor.submit(create_file, jobs[2]['id'], 'Rally',
                        'tests/data/rally-results.regression.xml', user_dell)
        executor.submit(create_file, jobs[2]['id'], 'certification.xml.gz',
                        'tests/data/certification.xml.tar.gz', user_dell,
                        'application/x-compressed')


def wait_db_ready():
    while True:
        try:
            r = get('identity')
            if r.status_code == 200:
                break
        except requests.exceptions.ConnectionError:
            continue
        finally:
            time.sleep(1)


def main():
    wait_db_ready()
    teams = create_teams()
    create_users(teams)
    products = create_products(teams)
    topics = create_topics(products)
    with futures.ThreadPoolExecutor() as executor:
        executor.submit(associate_topics_to_teams, topics, teams)
        components_future = executor.submit(create_components, topics)
        remotecis_future = executor.submit(create_remotecis, teams)
    components = components_future.result()
    remotecis = remotecis_future.result()
    jobs = create_jobs(topics, remotecis, teams, components)
    with futures.ThreadPoolExecutor() as executor:
        executor.submit(create_job_states, jobs)
        executor.submit(create_files, jobs)


if __name__ == '__main__':
    main()
